====================================================
Problem 106. Construct Binary Tree from Inorder and Postorder 
Traversal
====================================================
Given inorder and postorder traversal of a tree, construct the 
binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]

Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7



====================================================
Analysis
====================================================
SEE "1.png"


====================================================
Java Approach: Backtracing
2 ms	96.74%
41.8 MB	35.67%
====================================================
public static int[] POST;
public static int postP = 0;
public static Map<Integer, Integer> map;

public static TreeNode buildTree(int[] inorder, int[] postorder) {
	if(postorder.length == 0) return null;
	
	POST = postorder;
	postP = postorder.length - 1;
	map = new HashMap<Integer, Integer>();
	for(int i = 0; i < inorder.length; i++) map.put(inorder[i], i);
	
	return helper(0, postorder.length - 1);
}

public static TreeNode helper(int start, int end) {
	int nodePos = map.get(POST[postP]);
	TreeNode node = new TreeNode(POST[postP]);
	postP--;
	if(nodePos < end) node.right = helper(nodePos + 1, end);
	if(start  < nodePos) node.left = helper(start, nodePos - 1);
	
	return node;
}