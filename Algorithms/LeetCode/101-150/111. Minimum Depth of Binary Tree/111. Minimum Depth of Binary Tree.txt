====================================================
Problem 111. Minimum Depth of Binary Tree
====================================================
Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest 
path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its minimum depth = 2.



====================================================
Java Approach: Backtracing
0 ms	100.00%
39.7 MB	5.06%
====================================================
public static int minDep = 0;

public static int minDepth(TreeNode root) {
	if(root == null) return 0;
	minDep = Integer.MAX_VALUE;
	helper(root, 1);
	return minDep;
}

public static void helper(TreeNode node, int depth) {
	if(node.left == null && node.right == null) 
		minDep = Math.min(minDep, depth);
	if(node.left != null) helper(node.left, depth + 1);
	if(node.right != null) helper(node.right, depth + 1);
}

