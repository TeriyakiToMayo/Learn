====================================================
Problem 108. Convert Sorted Array to Binary Search Tree
====================================================
Given an array where elements are sorted in ascending 
order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined 
as a binary tree in which the depth of the two subtrees of 
every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which 
represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5



====================================================
Analysis
====================================================
Use mid as current node



====================================================
Java Approach: Backtracing
0 ms	100.00%
41.8 MB	5.12%
====================================================
public static TreeNode sortedArrayToBST(int[] nums) {
	if(nums.length == 0) return null;
	
	return helper(nums, 0, nums.length - 1);
}

public static TreeNode helper(int[] nums, int start, int end) {
	int mid = (start + end)/2;
	
	TreeNode node = new TreeNode(nums[mid]);
	
	if(mid > start) node.left = helper(nums, start, mid - 1);
	if(mid < end) node.right = helper(nums, mid + 1, end);
	return node;
}
