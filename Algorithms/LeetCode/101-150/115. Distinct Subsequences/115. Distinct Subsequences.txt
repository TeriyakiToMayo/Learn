====================================================
Problem 115. Distinct Subsequences
====================================================
Given a string S and a string T, count the number of distinct 
subsequences of S which equals T.

A subsequence of a string is a new string which is formed from 
the original string by deleting some (can be none) of the 
characters without disturbing the relative positions of the 
remaining characters. (ie, "ACE" is a subsequence of "ABCDE" 
while "AEC" is not).

Example 1:

Input: S = "rabbbit", T = "rabbit"
Output: 3
Explanation:

As shown below, there are 3 ways you can generate "rabbit" from 
S.
(The caret symbol ^ means the chosen letters)

rabbbit
^^^^ ^^
rabbbit
^^ ^^^^
rabbbit
^^^ ^^^

Example 2:

Input: S = "babgbag", T = "bag"
Output: 5
Explanation:

As shown below, there are 5 ways you can generate "bag" from S.
(The caret symbol ^ means the chosen letters)

babgbag
^^ ^
babgbag
^^    ^
babgbag
^    ^^
babgbag
  ^  ^^
babgbag
    ^^^
	
	

====================================================
Analysis
====================================================
S = "adbab", T = "ab"

		empty	a		d		b		a		b
empty	1		1		1		1		1		1
a		0		1		1		1		2		2
b		0		0		0		1		1		3


Recursion diagram:
	- each node is a recursion state
	- this is a Combination tree
	- Since T.length = 2, we only need 2 levels of the tree
	- * represents the picked(not applicable) element
	- (1, 1) represents this node corresponds to the table cell (1, 1)
		- note: branch11("aa") and branch21("da") corresponds to the same cell (2, 1)


a ("a")(1, 1)->	a* ("aa")(2, 1)
				d  ("ad")(2, 2)
				b  ("ab")(2, 3)OK
				a  ("aa")(2, 4)
				b  ("ab")(2, 5)OK
		
d ("d")(1, 2)->	a* ("da")(2, 1)
				d* ("dd")(2, 2)
				b  ("db")(2, 3)
				a  ("da")(2, 4)
				b  ("db")(2, 5)

b ("b")(1, 3)->	a* ("ba")(2, 1)
				d* ("bd")(2, 2)
				b* ("bb")(2, 3)
				a  ("ba")(2, 4)
				b  ("bb")(2, 5)
		
a ("a")(1, 4)->	a* ("aa")(2, 1)
				d* ("ad")(2, 2)
				b* ("ab")(2, 3)
				a* ("aa")(2, 4)
				b  ("ab")(2, 5)OK

b ("b")(1, 5)->	a* ("ba")(2, 1)
				d* ("bd")(2, 2)
				b* ("bb")(2, 3)
				a* ("ba")(2, 4)
				b* ("bb")(2, 5)


Hence there are 3 "ab"s


====================================================
Java Approach: Dynamic Programming
9 ms	43.78%
43.2 MB	5.13%
====================================================
public static int numDistinct(String S, String T) {
	// array creation
	int[][] mem = new int[T.length()+1][S.length()+1];

	// filling the first row: with 1s
	for(int j=0; j<=S.length(); j++) {
		mem[0][j] = 1;
	}
	
	// the first column is 0 by default in every other rows but the first, which we need.
	
	for(int i=0; i<T.length(); i++) {
		for(int j= i; j<S.length(); j++) {
			if(T.charAt(i) == S.charAt(j)) {
				mem[i+1][j+1] = mem[i][j] + mem[i+1][j];
			} else {
				mem[i+1][j+1] = mem[i+1][j];
			}
		}
	}
	IO.print2DArray(mem, false);
	
	return mem[T.length()][S.length()];
}
