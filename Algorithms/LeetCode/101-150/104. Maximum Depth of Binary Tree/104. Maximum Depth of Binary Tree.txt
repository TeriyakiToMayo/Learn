====================================================
Problem 104. Maximum Depth of Binary Tree
====================================================
Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest 
path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its depth = 3.



====================================================
Java Approach: Backtracing
0 ms	100.00%
39 MB	19.16%
====================================================
public static int maxDepth = 0;

public static int maxDepth(TreeNode root) {
	if(root == null) return 0;
	
	maxDepth = 1;
	helper(root, 1);
	
	return maxDepth;
}

public static void helper(TreeNode node, int depth) {
	if(node.left == null && node.right == null) maxDepth = Math.max(maxDepth, depth);
	if(node.left != null) helper(node.left, depth + 1);
	if(node.right != null) helper(node.right, depth + 1);
}




