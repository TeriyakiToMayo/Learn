====================================================
Problem 101. Symmetric Tree
====================================================
Given a binary tree, check whether it is a mirror of itself 
(ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3

 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
   

====================================================
Analysis
====================================================
Every left and right subtrees of a symmetric tree are symmetric


        1
       / \
      2   2
     / \ / \
    3  4 4  3
   / \     / \
  5   6   6   5


      2       2
     / \     / \
    3  4     4  3
   / \         / \
  5   6       6   5
  
    3           3
   / \         / \
  5   6       6   5
  
  
  


====================================================
Java Approach: Backtracing
0 ms	100.00%	
37.6 MB	28.24%
====================================================
public static boolean isSymmetric(TreeNode root) {
	if(root == null) return true;
	
	return helper(root.left, root.right);
}

public static boolean helper(TreeNode p, TreeNode q) {
	if(p == null || q == null) return p == q;
	
	return p.val == q.val && helper(p.left, q.right) && helper(p.right, q.left);
}