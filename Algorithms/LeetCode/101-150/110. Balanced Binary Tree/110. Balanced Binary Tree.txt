====================================================
Problem 110. Balanced Binary Tree
====================================================
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined 
as:

    a binary tree in which the left and right subtrees of 
every node differ in height by no more than 1.

 

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7

Return true.

Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4



====================================================
Java Approach: Backtracing
1 ms	99.89%
41.5 MB	9.73%
====================================================
static boolean balanced = true;

public static boolean isBalanced(TreeNode root) {
	balanced = true;
	helper(root);
	
	return balanced;
}

public static int helper(TreeNode node) {
	if(!balanced) return 0;
	
	if(node == null) return 0;
	int leftH = helper(node.left);
	int rightH = helper(node.right);
	if(Math.abs(leftH - rightH) > 1) {balanced = false; return 0;}
	
	return 1 + Math.max(leftH, rightH);
}
