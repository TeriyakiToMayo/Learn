====================================================
Problem 95. Unique Binary Search Trees II
====================================================
Given an integer n, generate all structurally unique BST's 
(binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown 
below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3




====================================================
Java Approach: Backtracing
1 ms	100.00%
41.7 MB	5.07%
====================================================
//Node: you must collect all possible subtrees of left and right,
//      then combine them



public static List<TreeNode> output;
public static int N = 0;
public static int remainNodes = 0;

public static List<TreeNode> generateTrees(int n) {
	output = new ArrayList<TreeNode>();
	N = n;
	
	if(n >= 1) output.addAll(helper(1, n));
	
	return output;
}

public static List<TreeNode> helper(int start, int end) {
	TreeNode node = new TreeNode(start);
	List<TreeNode> list = new ArrayList<TreeNode>();
	
	if(start == end) {
		list.add(node);
		return list;
	}
	
	for(int i = start; i <= end; i++) {
		
		List<TreeNode> leftList = null;
		if(i != start) {
			leftList = helper(start, i - 1);
		}
		List<TreeNode> rightList = null;
		if(i != end) {
			rightList = helper(i + 1, end);
		}
		
		if(i == start) {
			for(int j = 0; j < rightList.size(); j++) {
				node = new TreeNode(i);
				node.right = rightList.get(j);
				list.add(node);
			}
		}else if(i == end) {
			for(int j = 0; j < leftList.size(); j++) {
				node = new TreeNode(i);
				node.left = leftList.get(j);
				list.add(node);
			}
		}else {
			for(int j = 0; j < leftList.size(); j++) {
				for(int k = 0; k < rightList.size(); k++) {
					node = new TreeNode(i);
					node.left = leftList.get(j);
					node.right = rightList.get(k);
					list.add(node);
				}
			}
		}
	}
	
	return list;
}

