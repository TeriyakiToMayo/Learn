====================================================
Problem 57. Insert Interval
====================================================
Given a set of non-overlapping intervals, insert a new 
interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted 
according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], 
newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with 
[3,5],[6,7],[8,10].

NOTE: input types have been changed on April 15, 2019. 
Please reset to default code definition to get new method 
signature.



====================================================
Analysis
====================================================
{{1, 3}, {6, 9}}
{2, 5}


  0     1      2      3      4      5		//expanded_index = original * 2 + 1
_____ ______ ______ ______ ______ ______
      [1, 3]        [6, 9]        
  	    2      5							//left and right bounds of {2, 5}
	    0              1            2		//original_index
		
//Note: expanded_index/2 = original_index
//E.g.: 0/2 = 0, 1/2 = 0, 2/2 = 1, 3/2 = 1

Then:
	if left == right
		- if left and right are in empty slots(0, 2, 4...), then add new entry, 
		  position = original index of the next slot
		- if left and right are in non-empty slots, that means the new interval is 
		  included in the corresponding interval, hence no action is needed
	if left != right, then we combine the existing intervals



====================================================
Java Approach
3 ms	45.94%
46.9 MB	5.39%
====================================================
public static int[][] insert(int[][] intervals, int[] newInterval) {
		
	if(intervals.length == 0) return new int[][] {newInterval};
	
	Comparator<int[]> comparator = new Comparator<int[]>(){
		@Override
		public int compare(int[] a, int[] b){
			return a[0] - b[0];
		}
	};
	
	Arrays.sort(intervals, comparator);
	
	int left = -1;
	int right = -1;
	for(int i = 0; i < intervals.length; i++) {
		left = left == -1 ? findPos(newInterval[0], i, intervals[i]) :  left;
		right = right == -1 ? findPos(newInterval[1], i, intervals[i]) : right;
		
		if(right >= 0) break;
	}
	
	if(left == -1) left = 2 * intervals.length;
	if(right == -1) right = 2 * intervals.length;

	if(left == right) {
		List<int[]> list = new LinkedList<int[]>(Arrays.asList(intervals));
		if(left%2 == 0) {
			list.add(left/2, newInterval);
		}
		return list.toArray(new int[0][0]);
	}else {
		List<int[]> list = new LinkedList<int[]>();
		for(int i = 0, start = left/2; i < intervals.length; i++) {
			if(i == start) {
				int leftBound = left%2 == 0 ? newInterval[0] : intervals[i][0];
				int rightBound = right%2 == 0 ? newInterval[1] : intervals[right/2][1];
				list.add(new int[] {leftBound, rightBound});
				i = right%2 == 0 ? right/2 - 1 : right/2;
			}else list.add(intervals[i]);
		}
		return list.toArray(new int[0][0]);
	}
	
}

public static int findPos(int bound, int i, int[] interval) {
	if(bound < interval[0]) {
		return 2 * i; 
	}else if(interval[0] <= bound && bound <= interval[1]) {
		return 2 * i + 1;
	}
	return -1;
}


