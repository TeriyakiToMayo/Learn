====================================================
Problem 99. Recover Binary Search Tree
====================================================
Two elements of a binary search tree (BST) are swapped by 
mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2

Example 2:

Input: [3,1,4,null,null,2]	

  3
 / \
1   4
   /
  2

Output: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3

Follow up:

    A solution using O(n) space is pretty straight forward.
    Could you devise a constant space solution?



====================================================
Java Approach: Inorder Traversal with Constant Space
3 ms	60.42%
41.1 MB	25.13%
====================================================

//Record previous and current and check if there is any incorrect orders

public static void recoverTree(TreeNode root) {
	if(root == null) return;
	
	node0 = null;
	node1 = null;
	swap0 = null;
	swap1 = null;
	findingFirst = true;
	
	traverse(root);
	
	if(swap0 != null) {
		swap0.val = swap0.val ^ swap1.val;
		swap1.val = swap0.val ^ swap1.val;
		swap0.val = swap0.val ^ swap1.val;
	}
	
}

public static TreeNode node0 = null, node1 = null;
public static TreeNode swap0 = null, swap1 = null;
public static boolean findingFirst = true;

public static void traverse(TreeNode root) {
	if(root.left != null) traverse(root.left);
	if(node0 == null) node0 = root;
	else {
		node0 = node1 != null ? node1 : node0;
		node1 = root;
		if(findingFirst) {
			if(node0.val > node1.val) {
				swap0 = node0;
				swap1 = node1;
				findingFirst = false;
			}
		}else {
			if(node0.val > node1.val) {
				swap1 = node1;
				return;
			}
		}
		
	}
	
	if(root.right != null) traverse(root.right);
}