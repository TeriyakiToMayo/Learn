====================================================
Problem 69. Sqrt(x)
====================================================
Implement int sqrt(int x).

Compute and return the square root of x, where x is 
guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits 
are truncated and only the integer part of the result is 
returned.

Example 1:

Input: 4
Output: 2

Example 2:

Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.



====================================================
Java Approach: without using long
2 ms	84.13%
39.8 MB	5.01%
====================================================
public static int sqr(int n) {
	return n >= 46341 ? Integer.MAX_VALUE : n * n;
}

public static int mySqrt(int x) {

	if(x == 0) return 0;
	if(x == 1) return 1;
	if(x ==  Integer.MAX_VALUE) return 46340;
	
	int left = 0, right = x;
	int mid = left + (right - left)/2;
	int sqr1 = sqr(mid);
	int sqr2 = sqr(mid + 1);
	
	while(!(sqr1 <= x && sqr2 >= x)) {
		if(sqr1 > x) {
			right = mid - 1;
		}else if(sqr2 < x) {
			left = mid + 1;
		}
		mid = left + (right - left)/2;
		sqr1 = sqr(mid);
		sqr2 = sqr(mid + 1);
	}
	
	if(sqr2 == x) mid++;
	
	return mid;

}