====================================================
Problem 96. Unique Binary Search Trees
====================================================
Given n, how many structurally unique BST's (binary search 
trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3



====================================================
Analysis
====================================================
n: number of nodes
G(n): numTrees(n)	//Note 1: n here is only the number of nodes, 
					//not necessarily require the tree to have nodes within
					//1...n
					//	- E.g.: 
					//		G(5), at some time, we set root as 2, then the left
					//		must be 1 (TOTAL = G(1)), the right can be 3...5
					//		Assume the right to be 4, then there are 3 nodes in the tree whose root at right
					//		hence (TOTAL = G(3))
					//
					//Note 2: the numbers in left and right are always consecutive
					//	- E.g.:
					//		f(3), left 1...2, right 4...5
f(i): 1 <= i <= n, we set i as the root, then f(i) is the number of trees

	Assume
	n = 5
	f(1) = G(0) * G(4)	//left: no nodes
						//right: 4 nodes, nums in range 2...5
				1
		null		2
		
				1
		null		3
	
				1
		null		4
		
				1
		null		5
		
	f(2) = G(1) * G(3)	//left: 1 node
						//right: 3 nodes, nums in range 3...5
				2
			1		3
			
				2
			1		4
			
				2
			1		5
		
	f(3) = G(2) * G(2)	//left: 2 nodes within 1...2
						//right: 2 nodes, nums in range 4...5
				3
			1		4
			
				3
			1		5
			
				3
			2		4
			
				3
			2		5
			
		

Hence G(n) = f(1) + f(2) + ... + f(n)



====================================================
Java Approach: Dynamic Programming
0 ms	100.00%
36.4 MB	5.08%
====================================================
public static int numTrees(int n) {
	
	int[] dp = new int[n + 1];
	
	dp[0] = 1;
	dp[1] = 1;
	
	for(int i = 2; i <= n; i++) {
		for(int j = 1; j <= i; j++) {
			dp[i] += dp[j - 1] * dp[i - j];
		}
	}
	
	return dp[n];
}
