====================================================
Problem 98. Validate Binary Search Tree
====================================================
Given a binary tree, determine if it is a valid binary 
search tree (BST).

Assume a BST is defined as follows:

    The left subtree of a node contains only nodes with 
keys less than the node's key.
    The right subtree of a node contains only nodes with 
keys greater than the node's key.
    Both the left and right subtrees must also be binary 
search trees.

 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true

Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right 
child's value is 4.



====================================================
Java Approach: Backtracing
0 ms	100.00%
41.2 MB	5.09%
====================================================
public static boolean curValidation = true;

public static boolean isValidBST(TreeNode root) {
	if(root == null) return true;
	curValidation = true;
	helper(root);
	return curValidation;
}


public static int[] helper(TreeNode root) {
	if(!curValidation) return null;
	
	int[] res = new int[2];
	res[0] = root.val;
	res[1] = root.val;
	
	if(root.left != null) {
		int[] leftRes = helper(root.left);
		if(leftRes == null || leftRes[1] >= root.val) {curValidation = false; return null;}
		updateMinMax(res, leftRes);
		
	}
	
	if(root.right != null) {
		int[] rightRes = helper(root.right);
		if(rightRes == null || rightRes[0] <= root.val) {curValidation = false; return null;}
		updateMinMax(res, rightRes);
	}
	
	return res;
}

public static void updateMinMax(int[] a, int[] b) {
	a[0] = a[0] > b[0] ? b[0] : a[0];
	a[1] = a[1] < b[1] ? b[1] : a[1];
}
