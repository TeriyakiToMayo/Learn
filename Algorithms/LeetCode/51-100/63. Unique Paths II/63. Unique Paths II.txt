====================================================
Problem 61. Rotate List
====================================================
Given a linked list, rotate the list to the right by k 
places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL

Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL


====================================================
Java Approach: Dynamic Porgraming
1 ms	88.14%
40.5 MB	6.71%
====================================================

[0, 0, 0]
[0, 1, 0]
[0, 1, 0]
=>
[1, 1, 1]
[1, -1, 1]
[1, -1, 1]

public static int uniquePathsWithObstacles(int[][] obstacleGrid) {
	
	int m = obstacleGrid.length;
	int n = obstacleGrid[0].length;
	
	int origin = obstacleGrid[0][0];
	int input = origin == 0 ? 1 : -1;
	obstacleGrid[0][0] = input;
	for(int i = 1; i < m; i++) {
		if(obstacleGrid[i][0] == 1) input = -1;
		obstacleGrid[i][0] = input;
	}
	
	input = origin == 0 ? 1 : -1;
	for(int i = 1; i < n; i++) {
		if(obstacleGrid[0][i] == 1) input = -1;
		obstacleGrid[0][i] = input;
	}
	
	for(int i = 1; i < m; i++) {
		for(int j = 1; j < n; j++) {
			if(obstacleGrid[i][j] == 1) obstacleGrid[i][j] = -1;
			else if(obstacleGrid[i - 1][j] == -1) obstacleGrid[i][j] = obstacleGrid[i][j - 1];
			else if(obstacleGrid[i][j - 1] == -1) obstacleGrid[i][j] = obstacleGrid[i - 1][j];
			else{
				obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
			}
		}
	}
	
	IO.print2DArray(obstacleGrid, true);
	int result = obstacleGrid[m - 1][n - 1];
	
	return result > 0 ? result : 0;
}

