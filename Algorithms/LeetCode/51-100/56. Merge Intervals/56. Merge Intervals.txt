====================================================
Problem 56. Merge Intervals
====================================================
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge 
them into [1,6].

Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered 
overlapping.

NOTE: input types have been changed on April 15, 2019. Please 
reset to default code definition to get new method signature.


====================================================
Analysis
====================================================
After sorting with the left boundary, overlapping intervals are placed together

SEE "1.png"


====================================================
Java Approach
8ms: 70.44%
====================================================
public int[][] merge(int[][] arr) {
	if(arr == null || arr.length<=1)
		return arr;
	List<int[]> list = new ArrayList<>();
	//Arrays.sort(arr,(a,b)->a[0]-b[0]);
	Arrays.sort(arr,new Comparator<int[]>(){
		@Override
		public int compare(int[] a,int[] b){
			return a[0]-b[0];
		}
	});
	int i=0;
	int n = arr.length;
	while(i<n){
		int left = arr[i][0];
		int right = arr[i][1];
		while(i<n-1 && right>=arr[i+1][0]){
			right = Math.max(right,arr[i+1][1]);
			i++;
		}
		list.add(new int[] {left,right});
		i++;
	}
	return list.toArray(new int[list.size()][2]);
}


====================================================
Java Approach
9ms: 55.01%
46.1MB: 6.95%
====================================================
public static int[][] merge(int[][] intervals) {
        
	List<int[]> list = new LinkedList<int[]>();
	if(intervals.length == 0) return list.toArray(new int[0][0]);
	
	//Sort time: O(NlogN)
	Arrays.sort(intervals, new Comparator<int[]>() {
		@Override
		public int compare(int[] a, int[] b) {
			return a[0] - b[0];
		}
	});
	
	int[] curInterv = {intervals[0][0], intervals[0][1]};
	
	for(int i = 1; i < intervals.length; i++) {
		if(intervals[i][0] <= curInterv[1]) {
			if(curInterv[1] < intervals[i][1])
				curInterv[1] = intervals[i][1];
		}else {
			list.add(curInterv);
			curInterv = new int[2];
			curInterv[0] = intervals[i][0]; 
			curInterv[1] = intervals[i][1]; 
		}
		
	}
	
	list.add(curInterv);
	
	return list.toArray(new int[0][0]);
}




