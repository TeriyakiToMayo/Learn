====================================================
Problem 75. Sort Colors
====================================================
Given an array with n objects colored red, white or blue, 
sort them in-place so that objects of the same color are 
adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the 
color red, white, and blue respectively.

Note: You are not suppose to use the library's sort 
function for this problem.

Example:

Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Follow up:

    A rather straight forward solution is a two-pass 
algorithm using counting sort.
    First, iterate the array counting number of 0's, 1's, 
and 2's, then overwrite array with total number of 0's, 
then 1's and followed by 2's.
    Could you come up with a one-pass algorithm using only 
constant space?


====================================================
Java Approach: QuickSort
0 ms	100.00%
37.7 MB	5.08%
====================================================
public static void sortColors(int[] nums) {
	quickSort(nums, 0, nums.length - 1);
}

public static void quickSort(int[] nums, int a, int b) {
	if(a >= b) return;
	int mid = nums[a];
	int start = a, end = b, midPos = a;
	a += 1;
	
	int dir = 0;
	while(a <= b) {
		if((dir == 0 && mid > nums[b]) || (dir == 1 && mid < nums[a])) {
			int swapPos = dir == 0 ? b : a;
			swap(nums, midPos, swapPos);
			midPos = swapPos;
			a += dir == 1 ? 1 : 0;
			b += dir == 0 ? -1 : 0;
			dir = dir == 0 ? 1 : 0;
			continue;
		}
		a += dir == 1 ? 1 : 0;
		b += dir == 0 ? -1 : 0;
	}
	
	quickSort(nums, start, midPos - 1);
	quickSort(nums, midPos + 1, end);
}

public static void swap(int[] nums, int a, int b) {
	nums[a] = nums[a] ^ nums[b];
	nums[b] = nums[a] ^ nums[b];
	nums[a] = nums[a] ^ nums[b];
}



