====================================================
Problem 51. N-Queens
====================================================
The n-queens puzzle is the problem of placing n queens on an 
n√ón chessboard such that no two queens attack each other.

SEE "1.png"

Given an integer n, return all distinct solutions to the 
n-queens puzzle.

Each solution contains a distinct board configuration of the 
n-queens' placement, where 'Q' and '.' both indicate a queen 
and an empty space respectively.

Given an integer n, return all distinct solutions to the 
n-queens puzzle.

Each solution contains a distinct board configuration of the 
n-queens' placement, where 'Q' and '.' both indicate a queen 
and an empty space respectively.

Example:

Input: 4
Output: [
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Explanation: There exist two distinct solutions to the 
4-queens puzzle as shown above.



====================================================
Analysis
====================================================
------------------------------------------------------
[Occupying rows, columns, hills and dales]
Each queen only occupies 1 row, 1 column, 1 hill and 1 dale

SEE "3.png"


------------------------------------------------------
[Slashs and backslashs]
SEE "2.png" backslash

	0	1	2	3

0	a	b	c	d

1	b	c	d	e

2	c	d	e	f

3	d	e	f	g

slash_const = Distance_to_a = (row - 0) + (col - 0) = row + col


	0	1	2	3

0	d	c	b	a

1	e	d	c	b

2	f	e	d	c

3	g	f	e	d

backslash_const = Distance_to_a = (row - 0) + (len - col) = row + len - col
Since len is const
backslash_const2 = backslash_const - len = row - col

------------------------------------------------------
[Represent coordinates in 1-D Array]
static int[] s2Queens;	//index: row, content: col



====================================================
Java Approach: Backtracing
5ms			51.30%
37.9 MB		44.54%
====================================================
static int[] s2Cols;
static int[] s2Slashes;
static int[] s2Backslashes;
static int s2N = 0;
static List<List<String>> s2Output;
static int[] s2Queens;

public static List<List<String>> solveNQueens2(int n){
	//Initialize all static variables
	s2N = n;
	s2Cols = new int[n];
	s2Slashes = new int[2 * n - 1];
	s2Backslashes = new int[2 * n - 1];
	s2Queens = new int[n];
	s2Output = new LinkedList<List<String>>();
	
	helper(0);
	
	return s2Output;
}

public static void helper(int row) {
	for(int col = 0; col < s2N; col++) {
		if(locationValid(row, col)) {
			queenOps(row, col, true);
			if(row < s2N - 1) {
				helper(row + 1);
			}else {
				generateOutput();
			}
			queenOps(row, col, false);
		}
	}
}

public static boolean locationValid(int row, int col) {
	int r = s2Cols[col] + s2Slashes[row + col] + s2Backslashes[row + s2N - 1 - col];
	return r == 0;
}

public static void queenOps(int row, int col, boolean place) {
	s2Queens[row] = place ? col : 0;
	int i = place ? 1 : 0;
	s2Cols[col] = i;
	s2Slashes[row + col] = i;
	s2Backslashes[row + s2N - 1 - col] = i;
}

public static void generateOutput() {
	List<String> list = new LinkedList<String>();
	for(int row = 0; row < s2N; row++) {
		StringBuilder sb = new StringBuilder();
		for(int col = 0; col < s2N; col++) {
			if(s2Queens[row] == col) sb.append("Q");
			else sb.append(".");
		}
		list.add(sb.toString());
	}
	s2Output.add(list);
}


====================================================
52 Java Approach: Backtracing
1 ms	85.12%	//it looks like 51. backtracing is fast enough, but generateOutput is slow
33.3 MB	32.39%
====================================================
static int[] s2Cols;
static int[] s2Slashes;
static int[] s2Backslashes;
static int s2N = 0;
static int s2Output;
static int[] s2Queens;

public static int totalNQueens2(int n) {
	s2N = n;
	s2Cols = new int[n];
	s2Slashes = new int[2 * n - 1];
	s2Backslashes = new int[2 * n - 1];
	s2Queens = new int[n];
	s2Output = 0;
	
	helper(0);
	
	return s2Output;
}

public static void helper(int row) {
	for(int col = 0; col < s2N; col++) {
		if(locationValid(row, col)) {
			queenOps(row, col, true);
			if(row < s2N - 1) {
				helper(row + 1);
			}else {
				s2Output++;
			}
			queenOps(row, col, false);
		}
	}
}

public static boolean locationValid(int row, int col) {
	int r = s2Cols[col] + s2Slashes[row + col] + s2Backslashes[row + s2N - 1 - col];
	return r == 0;
}

public static void queenOps(int row, int col, boolean place) {
	s2Queens[row] = place ? col : 0;
	int i = place ? 1 : 0;
	s2Cols[col] = i;
	s2Slashes[row + col] = i;
	s2Backslashes[row + s2N - 1 - col] = i;
}
