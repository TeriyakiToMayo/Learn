====================================================
Problem 78. Subsets
====================================================
Given a set of distinct integers, nums, return all possible 
subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]


====================================================
Java Approach: Backtracing
1 ms	99.16%
38.8 MB	5.06%
====================================================

static ArrayList<Integer> tmpList;
static List<List<Integer>> output;

public static List<List<Integer>> subsets(int[] nums) {
	output = new ArrayList<>();
	tmpList = new ArrayList<>();
	findCombinations(0, nums);
	
	return output;
}

private static void findCombinations(int index, int[] nums) {
	//using ArrayList in this case is faster
	output.add(new ArrayList<>(tmpList));

	for (int i = index; i < nums.length; i++) {
		tmpList.add(nums[i]);
		findCombinations(i + 1, nums);
		tmpList.remove(tmpList.size() - 1);
	}
}
