====================================================
Problem 82. Remove Duplicates from Sorted List II
====================================================
Given a sorted linked list, delete all nodes that have 
duplicate numbers, leaving only distinct numbers from the 
original list.

Example 1:

Input: 1->2->3->3->4->4->5
Output: 1->2->5

Example 2:

Input: 1->1->1->2->3
Output: 2->3



====================================================
Java Approach: Two Pointers
1 ms	97.89%
39.1 MB	5.14%
====================================================
public static ListNode deleteDuplicates(ListNode head) {
	
	if(head == null) return null;
	
	ListNode newHead = new ListNode(0);
	ListNode lastOfNew = newHead;
	ListNode cur = head;
	lastOfNew.next = cur;
	
	
	while(lastOfNew.next != null) {
		
		//find the last of current section
		while(true) {
			if(cur.next == null || cur.val != cur.next.val) break;
			else cur = cur.next;
		}
		
		if(lastOfNew.next == cur) lastOfNew = cur;
		else lastOfNew.next = cur.next;
		cur = cur.next;
	}
	
	return newHead.next;
}



