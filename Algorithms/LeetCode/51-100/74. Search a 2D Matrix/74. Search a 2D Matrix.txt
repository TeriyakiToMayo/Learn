====================================================
Problem 74. Search a 2D Matrix
====================================================
Write an efficient algorithm that searches for a value in 
an m x n matrix. This matrix has the following properties:

    Integers in each row are sorted from left to right.
    The first integer of each row is greater than the last 
integer of the previous row.

Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true

Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false


====================================================
Java Approach: Binary Search
0 ms	100.00%
41.7 MB	40.77%
====================================================
public static boolean searchMatrix(int[][] matrix, int target) {
	if(matrix.length == 0 || matrix[0].length == 0) return false;
	int r = matrix.length, c = matrix[0].length;
	
	int[] res = searchLine(matrix, -1, c - 1, target);
	if(res.length == 1) return true;
	else if(res[1] == r) return false;
	
	res = searchLine(matrix, res[1], -1, target);
	if(res.length == 1) return true;
	else return false;
}

public static int[] searchLine(int[][] matrix, int row, int col, int target) {
	int r = matrix.length, c = matrix[0].length;
	int left = 0, right = row >= 0 ? c - 1 : r - 1, mid = 0;
	int midN = 0;
	while(left <= right) {
		mid = left + (right - left)/2;
		midN = row >= 0 ? matrix[row][mid] : matrix[mid][col];
		if(midN == target) return new int[] {mid};
		else if(midN > target) right = mid - 1;
		else left = mid + 1;
	}
	mid = left + (right - left)/2;
	mid = mid >= (row >= 0 ? c: r) ? mid - 1 : mid;
	midN = row >= 0 ? matrix[row][mid] : matrix[mid][col];
	return target < midN ? new int[] {mid - 1, mid} : new int[] {mid, mid + 1};
}

