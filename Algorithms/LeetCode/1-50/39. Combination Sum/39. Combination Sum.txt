====================================================
Problem 39. Combination Sum
====================================================
Given a set of candidate numbers (candidates) 
(without duplicates) and a target number (target), 
find all unique combinations in candidates where the 
candidate numbers sums to target.

The same repeated number may be chosen from 
candidates unlimited number of times.

Note:

    All numbers (including target) will be positive 
integers.
    The solution set must not contain duplicate 
combinations.

Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]

Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]



====================================================
Analysis
====================================================
------------------------------------------------------
[Why use "int i = start" instead of "int i = 0"]
This way, we can eliminate duplicate combinations
SEE "remove duplicate combinations.jpg"


------------------------------------------------------
[How to keep variables copies in backtracing]

1. Use return type

Num5_LongestPalindromicSubstring.java:
public static boolean isPalindrome(String str) {
		
	if(str.length() <= 1) {
		return true;
	}
	
	if(str.charAt(0) == str.charAt(str.length() - 1)) {
		return isPalindrome(str.substring(1, str.length() - 1));
	}
	
	return false;
}


2. Pass variable as parameter

public static void findComb(List<List<Integer>> resultList, int[] candidates, 
										int residue, int start, Stack<Integer> stack) {}
										
//resultList is passed through backtracing



====================================================
Java Approach: Backtracing
====================================================

public static List<List<Integer>> combinationSum2(int[] candidates, int target) {
	List<List<Integer>> resultList = new LinkedList<List<Integer>>();
	if(candidates.length == 0) return resultList;
	Arrays.sort(candidates);
	findComb(resultList, candidates, target, 0, new Stack<Integer>());
	return resultList;
}

public static void findComb(List<List<Integer>> resultList, int[] candidates, int residue, int start, Stack<Integer> stack) {
	for(int i = start; i < candidates.length && candidates[i] <= residue; i++) {
		stack.push(candidates[i]);
		
		//Since all duplicates are eliminated, no need to check duplicate when adding new List
		if(candidates[i] == residue) resultList.add(new LinkedList<Integer>(stack));
		
		else findComb(resultList, candidates, residue - candidates[i], i, stack);
		stack.pop();
	}
}


====================================================
By-product: generate comb (with repeat)
====================================================
SEE "generate combinations.jpg" left diagram

E.g.: [1, 2, 3] output: 

[1] [1, 1] [1, 1, 1] 
           [1, 1, 2]
           [1, 1, 3]
	[1, 2] [1, 2, 2]
           [1, 2, 3]
    [1, 3] [1, 3, 3]
[2] [2, 2] [2, 2, 2]
           [2, 2, 3]
    [2, 3] [2, 3, 3]
[3] [3, 3] [3, 3, 3]


public static List<List<Integer>> genComb(int[] candidates){
	List<List<Integer>> genCombList = new LinkedList<List<Integer>>();
	if(candidates.length == 0) return genCombList;
	Arrays.sort(candidates);
	genCombHelper(genCombList, candidates, 0, new Stack<Integer>(), candidates.length);
	return genCombList;
}

public static void genCombHelper(List<List<Integer>> genCombList, int[] candidates, 
		int start, Stack<Integer> stack, int size){
	if(stack.size() > 0) genCombList.add(new LinkedList<Integer>(stack));
	if(size == 0) return;
	for(int i = start; i < candidates.length; i++) {
		stack.push(candidates[i]);
		genCombHelper(genCombList, candidates, i, stack, size - 1);
		stack.pop();
	}
	
}


====================================================
By-product: generate comb (without repeat)
====================================================
SEE "generate combinations.jpg" right diagram

E.g.: [1, 2, 3] output: 

[1] [1, 2] [1, 2, 3]
    [1, 3]
[2] [2, 3]
[3]



public static List<List<Integer>> genCombNoRep(int[] candidates){
	List<List<Integer>> genCombNoRepList = new LinkedList<List<Integer>>();
	if(candidates.length == 0) return genCombNoRepList;
	Arrays.sort(candidates);
	genCombNoRepHelper(genCombNoRepList, candidates, 0, new Stack<Integer>());
	return genCombNoRepList;
}

public static void genCombNoRepHelper(List<List<Integer>> genCombNoRepList, int[] candidates, 
		int start, Stack<Integer> stack){
	if(stack.size() > 0) genCombNoRepList.add(new LinkedList<Integer>(stack));
	for(int i = start; i < candidates.length; i++) {
		stack.push(candidates[i]);
		genCombNoRepHelper(genCombNoRepList, candidates, i + 1, stack);
		stack.pop();
	}
	
}


