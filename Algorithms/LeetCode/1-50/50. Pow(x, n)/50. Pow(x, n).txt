====================================================
Problem 50. Pow(x, n)
====================================================
Implement pow(x, n), which calculates x raised to the 
power n (xn).

Example 1:

Input: 2.00000, 10
Output: 1024.00000

Example 2:

Input: 2.10000, 3
Output: 9.26100

Example 3:

Input: 2.00000, -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

Note:

    -100.0 < x < 100.0
    n is a 32-bit signed integer, within the range [−231, 231 − 1]


====================================================
Java Approach: Recursion
1ms: 99.83%
40MB: 5.22%
====================================================

public static double myPow(double x, int n) {
	
	if(n == 0) return 1;
	if(n == 1) return x;
	if(n == -1) return 1f/x;
	
	//Since n might be Integer.MIN_VALUE -2147483648
	//Math.abs(n) == 2147483648 > 2147483647 == Integer.MAX_VALUE
	//Hence we divided it first then make absolute value
	double pow = myPow(x, Math.abs(n / 2));
	pow = pow * pow * (n%2 == 0 ? 1 : x);

	if(n < 0) pow = 1f / pow;
	
	return pow;
}

