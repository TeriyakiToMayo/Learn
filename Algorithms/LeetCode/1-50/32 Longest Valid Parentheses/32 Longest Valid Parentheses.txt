====================================================
Problem 32 Longest Valid Parentheses
====================================================
Given a string containing just the characters '(' and ')', 
find the length of the longest valid (well-formed) 
parentheses substring.

Example 1:

Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"

Example 2:

Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is 
"()()"



====================================================
Analysis
====================================================
   ( ) ( ( ) )
 | 
-1

   ( ) ( ( ) )
 | |
-1 0

   ( ) ( ( ) )
 | | |
-1 0 1			//cancel out [0, 1], pop 0, then length = 1 - (-1) = 2

   ( ) ( ( ) )
 |     |
-1     2

   ( ) ( ( ) )
 |     | |
-1     2 3

   ( ) ( ( ) )
 |     | | |
-1     2 3 4	//cancel out [3, 4], pop 3, then length = 4 - 2 = 2

   ( ) ( ( ) )
 |     |     |
-1     2     5	//cancel out [2, 4], pop 2, then length = 5 - (-1) = 6


Note: -1 is always the beginning of this set of parentheses



====================================================
Java Approach: Using Stack
====================================================

public static int longestValidParentheses3(String s) {
	int max = 0;

	Stack<Integer> stack = new Stack<>();
	stack.push(-1);										//set the beginning of the first set of parentheses

	for(int i = 0; i < s.length(); i++) {
		if(s.charAt(i) == '(') stack.push(i);
		else {
			stack.pop();
			if(stack.empty()) {
				 stack.push(i);							//when empty, set the beginning of the next set of parentheses
			}else {
				 max = Math.max(max, i - stack.peek());
			}
		}
	}

	return max;
}



====================================================
Java Approach: Dynamic Programming
====================================================
public static int longestValidParentheses2(String s) {
	int maxans = 0;
	int dp[] = new int[s.length()];
	for (int i = 1; i < s.length(); i++) {
		out("start: " + Arrays.toString(dp));
		if (s.charAt(i) == ')') {
			if (s.charAt(i - 1) == '(') {
				//i - 1: '('
				//i - 2: ending of last set
				//e.g.	"(   )   (   )"
				//			 b   a   i
				//a: i - 1
				//b: i - 2
				dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
			} 
			//Now, charAt(i) is ')', and charAt(i - 1) is also ')',
			//we need to trace back to find corresponding '('
			//		Case 1: current set of parentheses starts from beginning	e.g. "()()')'", i = 4
			//			- (i - dp[i - 1] > 0) checks if current set of parentheses starts from beginning
			//			- if it is, then no corresponding '(', then we should keep dp[i]  as 0
			//		Case 2: current set does not start from beginning e.g. "())(')'", i = 4
			//			- char just before current set is '(': 
			//				- calculate dp[i]
			//			- char just before current set is not '(': 
			//				- keep dp[i] as 0
			
			//dp[i - 1]: length of current valid set
			//(i - dp[i - 1]): beginning of current valid set
			//(i - dp[i - 1] - 1): character just before current valid set
			//(i - dp[i - 1] - 2): the end of last valid set
			//e.g.	"(   (   )   (   (    )   (    )   )   )"
			//       0   0   2   0   0    2   0    4   0   0
			//			     d   c   b             a   i     
			//a: dp[i - 1]
			//b: i - dp[i - 1]
			//c: i - dp[i - 1] - 1
			//d: i - dp[i - 1] - 2
			else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {
					out("dp[i - 1] = " + dp[i - 1] + ", (i - dp[i - 1]) = " + (i - dp[i - 1]));
					if((i - dp[i - 1]) >= 2) out("i = " + i + ", (i - dp[i - 1] - 2) = " + (i - dp[i - 1] - 2) + ", dp = " + dp[i - dp[i - 1] - 2]);
					//(i - dp[i - 1]) >= 2 checks if there is at least a pair of parentheses before current set
					dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
				}
				maxans = Math.max(maxans, dp[i]);
			}
			out("end: " + Arrays.toString(dp));
	}
	return maxans;
}