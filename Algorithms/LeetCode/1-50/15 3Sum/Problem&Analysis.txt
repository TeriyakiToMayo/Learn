//==================================================================
// Problem
//==================================================================

Given an array nums of n integers, are there elements a, b, c in nums such that a + b 
+ c = 0? Find all unique triplets in the array which gives the sum of zero (target).

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]


====================================================
Java Approach: Standard
====================================================
public static List<List<Integer>> threeSum3(int[] nums){
	Arrays.sort(nums);
	List<List<Integer>> list = new LinkedList<>();
	
	for(int i = 0; i <= nums.length - 3; i++) {
		if(i > 0 && nums[i - 1] == nums[i]) continue;
		
		if(nums[i]*4>0) break;// Too Big!!
		 if(nums[i]+3*nums[nums.length-1]<0) continue;//Too Small
		
		int j = i + 1, k = nums.length - 1;
		while(j < k) {
			int sum = nums[i] + nums[j] + nums[k];
			if(sum == 0) {
				//Add current combination to list
				List<Integer> subList = Arrays.asList(nums[i], nums[j], nums[k]);	//This is faster than creating an array and then convert it to list
				list.add(subList);
				
				//Continue calculation, since there might be other combinations
				//e.g.: [-3, 0, 3] [-3, 1, 2]
				k--;
				while(j < k && nums[k] == nums[k + 1])k--;	//must be j < k, or it may run out of the bound
				j++;
				while(j < k && nums[j] == nums[j - 1])j++;
			}else if(sum > 0) {
				k--;
				while(j < k && nums[k] == nums[k + 1])k--;
			}else {
				j++;
				while(j < k && nums[j] == nums[j - 1])j++;
			}
		}
	}
	
	return list;
}



1. Sort nums

2. Iterate through different nums

	--------------
	00011225588999
	i

	--------------
	00011225588999
	   i
	   
	--------------
	00011225588999
		 i
		 
	......

	--------------
	00011225588999
			   i
		   
3. For each i, find lo and hi combinations

	--------------
	00011225588999
	il           h

	if sum equals target, add the combination to list, then keep narrowing the range, since there might be
	other combinations e.g. [-3, 0, 3] [-3, 1, 2] target 0
	
	if sum larger than target, move h to last different num
	
	--------------
	00011225588999
	il        h
	
	if sum smaller than target, move lo to next different num
	
	--------------
	00011225588999
	il        h
	
	