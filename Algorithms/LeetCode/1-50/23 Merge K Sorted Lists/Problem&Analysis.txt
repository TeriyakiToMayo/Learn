====================================================
Problem 23
====================================================
Merge k sorted linked lists and return it as one 
sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6


====================================================
Analysis
====================================================
Time complexity (Priority Queue):
	
	O(Nlogk)

	Comparison: O(logk)
		- k: number of lists (number of nodes in queue)
		- Since priority queue is base on heap,
		  each pop costs log2(k)
	Node amount: N
	

====================================================
Java Approach: Priority Queue
====================================================
public static ListNode mergeKLists(ListNode[] lists) {
	if(lists.length == 0) return null;
	
	Comparator<ListNode> comparator = new Comparator<ListNode>() {
		@Override
		public int compare(ListNode o1, ListNode o2) {
			if(o1.val < o2.val) return -1;
			else if(o1.val > o2.val) return 1;
			else return 0;
		}
	};
	
	PriorityQueue<ListNode> queue = new PriorityQueue<>(lists.length, comparator);
	
	for(ListNode node : lists) {
		if(node != null) {
			queue.add(node);
		}
	}
	
	ListNode head = queue.isEmpty() ? null : queue.poll();
	if(head != null && head.next != null) queue.add(head.next);
	ListNode curNode = head;
	
	while(!queue.isEmpty()) {
		ListNode node = queue.poll();
		curNode.next = node;
		curNode = node;
		
		if(node.next != null) queue.add(node.next);
	}
	
	return head;
}


