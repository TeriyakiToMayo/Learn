====================================================
Problem 46. Permutations
====================================================
Given a collection of distinct integers, return all 
possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]



====================================================
Analysis
====================================================
Difference between 39. 40. Combinations:

	- Unlike combinations, permutations does not remove repeated 
	  combinations like the right side of "39. Combination Sum\generate combinations.jpg"
	- Instead, permutation traverses a complete tree
	
E.g.: [1, 2, 3]
Combinations (each vertex represents a combination):
    
					|
	 --------------- ---------------
	|				|				|
	1				2				3
	|				|
 --- ---			|
|		|			|
2		3			3
|
3

[1]					[2]				[3]
[1, 2]				[2, 3]
[1, 2, 3]
[1, 3]


Permutations:
						
					[1, 2, 3]
						|
		 --------------- ---------------
		|				|				|
		1				2				3
		|				|				|
	 [2,  3]		 [1,  3]		 [1,  2]
	 --- ---		 --- ---		 --- ---
	|		|		|		|		|		|
	2		3		1		3		1		2
	|		|		|		|		|		|
   [3]	   [2]	   [3]	   [1]	   [2]	   [1]
    |		|		|		|		|		|
	3		2		3		1		2		1
	
[1, 2, 3]		[2, 1, 3]		[3, 1, 2]
		[1, 3, 2]		[2, 3, 1]		[3, 2, 1]
				
				
	

====================================================
Java Approach: Backtracing
====================================================

backtrack():
[1, 2, 3, 4, 5]	-> next backtrack()
    F        n
	
		next backtrack():
		[1, 2, 3, 4, 5]	-> next next backtrack()
			   F     n
		
		[1, 3, 2, 4, 5]	-> next next backtrack()
			   F     n
			   
		[1, 4, 3, 2, 5]	-> next next backtrack()
			   F     n
			   
		[1, 5, 3, 4, 2]	-> next next backtrack()
			   F     n
				
				next next backtrack():
				... ...
		

[2, 1, 3, 4, 5]	-> next backtrack()
    F        n

[3, 2, 1, 4, 5]	-> next backtrack()
    F        n
	
[4, 2, 3, 1, 5]	-> next backtrack()
    F        n
	
[5, 2, 3, 4, 1]	-> next backtrack()
    F        n
	
	
//Optimization 1: use 1 [output] object through out the backtracking process
//Optimization 2: instead of creating new List at the end of each backtracking, create them at the beginning
//Optimization 3: modify values in original [nums] List
	
	

public static void backtrack(int n, ArrayList<Integer> nums, 
		List<List<Integer>> output, int first) {
	// if all integers are used up
	if (first == n)
		output.add(new ArrayList<Integer>(nums));
	for (int i = first; i < n; i++) {
		// place i-th integer first 
		// in the current permutation
		Collections.swap(nums, first, i);
		// use next integers to complete the permutations
		backtrack(n, nums, output, first + 1);
		// backtrack
		Collections.swap(nums, first, i);
	}
}
	
public static List<List<Integer>> permute3(int[] nums) {
	// init output list
	List<List<Integer>> output = new LinkedList();
	
	// convert nums into list since the output is a list of lists
	ArrayList<Integer> nums_lst = new ArrayList<Integer>();
	for (int num : nums)
	nums_lst.add(num);
	
	int n = nums.length;
	backtrack(n, nums_lst, output, 0);
	return output;
}
	
	
