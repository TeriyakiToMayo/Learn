====================================================
Problem 48. Rotate Image
====================================================
You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:

You have to rotate the image in-place, which means 
you have to modify the input 2D matrix directly. DO 
NOT allocate another 2D matrix and do the rotation.

Example 1:

Given input matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

rotate the input matrix in-place such that it becomes:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]

Example 2:

Given input matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

rotate the input matrix in-place such that it becomes:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]


====================================================
Analysis
====================================================
SEE "Rotate Image.jpg"


====================================================
Java Appraoch
0ms: 100%
41.7MB: 5.18%
====================================================

public static void rotate(int[][] matrix) {
        
	int len = matrix.length;
	int bound = len / 2 + (len%2 == 0 ? 0 : 1);
	
	for(int i = 0; i < bound; i++) {
		//len - i * 2: current matrix length
		//innerBound: last element of current line of elements
		int innerBound = i + len - i * 2 - 2;
		for(int j = i; j <= innerBound; j++) {
			int x = i, y = j;
			int storedVal = matrix[x][y];
			for(int k = 0; k < 4; k++) {
				int[] nextCoord = rotateCoord(x, y, len);
				int tempVal = matrix[nextCoord[0]][nextCoord[1]];
				matrix[nextCoord[0]][nextCoord[1]] = storedVal;
				storedVal = tempVal;
				x = nextCoord[0];
				y = nextCoord[1];
			}
		}
	} 
}

public static int[] rotateCoord(int x, int y, int len) {
	return new int[] {y, len - x - 1};
}
