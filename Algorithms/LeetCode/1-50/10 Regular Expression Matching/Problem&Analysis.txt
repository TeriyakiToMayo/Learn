//==================================================================
// Problem
//==================================================================
Given an input string (s) and a pattern (p), implement regular 
expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

Note:

    s could be empty and contains only lowercase letters a-z.
    p could be empty and contains only lowercase letters a-z, and 
characters like . or *.

Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Example 2:

Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. 
Therefore, by repeating 'a' once, it becomes "aa".

Example 3:

Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".

Example 4:

Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. 
Therefore, it matches "aab".

Example 5:

Input:
s = "mississippi"
p = "mis*is*p*."
Output: false


//==================================================================
// Java Approach: Dynamic Programming
//==================================================================
public static boolean isMatch2(String s, String p) {
	
	//Transform sring p so that c* and .* are represented as single character
	//E.g.:
	//p  = "abc*..*"
	//p2 = "abC.+"	//c* => C	.* => +
	String p2 = "";
	for(int i = 0; i < p.length(); i++) {
		char c = p.charAt(i);
		if(i < p.length() - 1 && p.charAt(i + 1) == '*') {
			p2 += c == '.' ? '+' : Character.toUpperCase(c);
			i++;
		}else {
			p2 += c;
		}
	}
	
	int m = s.length();
	int n = p2.length();
	
	boolean[][] dp = new boolean[m + 1][n + 1];
	
	//initialize
	dp[0][0] = true;
	for(int i = 1; i <= n; i++) {
		//if c* or .*, then match
		dp[0][i] = dp[0][i - 1] && ((p2.charAt(i - 1) >= 'A' && p2.charAt(i - 1) <= 'Z') || p2.charAt(i - 1) == '+');
	}
	//No need to set up falses to the first column, since they are already false
	
	for(int i = 1; i <= m; i++) {
		for(int j = 1; j <= n; j++) {
			if(s.charAt(i - 1) == p2.charAt(j - 1) || p2.charAt(j - 1) == '.') {
				//Case: c
				//Case: .
				dp[i][j] = dp[i - 1][j - 1];
			}else if(p2.charAt(j - 1) >= 'A'&& p2.charAt(j - 1) <= 'Z') {
				//Case: c*
				char c = Character.toLowerCase(p2.charAt(j - 1));
				dp[i][j] = dp[i][j - 1] || (s.charAt(i - 1) == c ? dp[i - 1][j] : false);
			}else if(p2.charAt(j - 1) == '+') {	
				//Case: .*
				dp[i][j] = dp[i][j - 1] || dp[i - 1][j];
			}
		}
	}
//	printMatrix(dp);
	
	return dp[m][n];
}

