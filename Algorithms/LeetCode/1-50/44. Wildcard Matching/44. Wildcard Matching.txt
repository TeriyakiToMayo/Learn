====================================================
Problem 44. Wildcard Matching
====================================================
Given an input string (s) and a pattern (p), 
implement wildcard pattern matching with support for 
'?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the 
empty sequence).

The matching should cover the entire input string 
(not partial).

Note:

    s could be empty and contains only lowercase 
letters a-z.
    p could be empty and contains only lowercase 
letters a-z, and characters like ? or *.

Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Example 2:

Input:
s = "aa"
p = "*"
Output: true
Explanation: '*' matches any sequence.

Example 3:

Input:
s = "cb"
p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter 
is 'a', which does not match 'b'.

Example 4:

Input:
s = "adceb"
p = "*a*b"
Output: true
Explanation: The first '*' matches the empty 
sequence, while the second '*' matches the substring 
"dce".

Example 5:

Input:
s = "acdcb"
p = "a*c?b"
Output: false

====================================================
Analysis: Dynamic Programming
====================================================

s = "abcde"
p = "ab*"


				a			b			*
	""			""			""			""
	""			"a"			"ab"		"ab*"
	True		False		False		False
	
a	"a"			"a"			"a"			"a"
	""			"a"			"ab"		"ab*"
	False		True		False		False

b	"ab"		"ab"		"ab"		"ab"
	""			"a"			"ab"		"ab*"
	False		False		True		True

c	"abc"		"abc"		"abc"		"abc"
	""			"a"			"ab"		"ab*"
	False		False		False		True

d	"abcd"		"abcd"		"abcd"		"abcd"		â†‘
	""			"a"			"ab"		"ab*"		|
	False		False		False		True		|
													|	* matches 1 character
e	"abcde"		"abced"		"abcde"		"abcde"		|
	""			"a"			"ab"		"ab*"		|
	False		False		False		True		|


								<---------------
								 * matches empty
For
"ab"
"ab*"

the left means * matches empty
"ab"
"ab"

the top means * mathces 1 character 'b'
"a"
"ab*"

hence going left is correct



For
"abc"
"ab*"

the left means * matches empty
"abc"
"ab"

the top means * mathces 1 character 'b'
"ab"
"ab*"

hence going top is correct



====================================================
Java Approach: Dynamic Programming
====================================================

public static boolean isMatch(String s, String p) {
	int m = s.length();
	int n = p.length();
	
	boolean[][] dp = new boolean [m + 1][n + 1];	//initialized as false
	
	dp[0][0] = true;
	for(int i = 1; i <= n; i++) {
		dp[0][i] = dp[0][i - 1] && p.charAt(i - 1) == '*';
	}
	//No need to set up falses to the first column, since they are already false
	
	for(int i = 1; i <= m; i++) {
		for(int j = 1; j <= n; j++) {
			//i = 1, j = 1, then s.charAt(0), p.charAt(0)
			if(s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '?') {
				dp[i][j] = dp[i - 1][j - 1];
			}else if(p.charAt(j - 1) == '*') {
				//dp[i][j - 1]: * matches empty
				//dp[i - 1][j]: * matches 1 character
				dp[i][j] = dp[i][j - 1] || dp[i - 1][j];
			}
		}
	}
	
//    printMatrix(dp);
	
	return dp[m][n];
}

