//==================================================================
// Basic Code: Java
//==================================================================
public static void quickSort(int[] nums, int start, int end) {
	if(end - start <= 0) return;
	int left = start + 1, right = end, mid = start;
	int midNum = nums[mid];
	int dir = 0;	//0: to left, 1: to right
	while(left <= right) {
		if(dir == 0) {
			if(midNum > nums[right]) {
				swap(nums, mid, right);
				mid = right;
				dir = 1;
			}
			right--;
		}else {
			if(midNum < nums[left]) {
				swap(nums, mid, left);
				mid = left;
				dir = 0;
			}
			left++;
		}
	}

	quickSort(nums, start, mid - 1);
	quickSort(nums, mid + 1, end);
}

public static void swap(int[] nums, int a, int b) {
	nums[a] = nums[a] ^ nums[b];
	nums[b] = nums[a] ^ nums[b];
	nums[a] = nums[a] ^ nums[b];
}

//==================================================================
// Analysis
//==================================================================

------------------------------------------------------
[Process]
1. l moves to right, r moves to left, until l == r, hence each element is traversed
2. elements on the left of l are <= mid number, except mid number
   elements on the right of r are >= mid number, except mid number


3 5 1 4
m l   r

3 5 1 4	=> 1 5 3 4
m l r        l m
             r
			 
1 5 3 4	=> 1 3 5 4
  l m        m l
  r          r


------------------------------------------------------
[Worst Case]
{10, 6, 7, 8, 9} (pick left most as pivot)

[10, 6, 7, 8, 9]	(move 6, 7, 8, 9 to left side â‰ˆ n times)	=> 
[9, 6, 7, 8, 10]	(move 6, 7, 8 to left side)		=> 
[8, 6, 7, 9, 10]	(move 6, 7 to left side)		=>
[7, 6, 8, 9, 10]	(move 6 to left side)			=> 
[6, 7, 8, 9, 10]

n loop * n times move = n^2



//==================================================================
// Basic Code: C++
//==================================================================
void partition(vector<int> &nums, int start, int end) {
	if (start >= end)return;

	int left = start, right = end;
	int pivot = nums[(start + end) / 2];

	while (true) {
		while (left <= right && nums[left] < pivot) {
			left++;
		}
		while (left <= right && nums[right] > pivot) {
			right--;
		}
		
		//Notice: 
		//now all numbers left to "left" are smaller or equal to pivot
		//now all numbers right to "right" are larger or equal to pivot
		//pivot does not necessarily at the end:
		//[3, 5, 9, 10, 6, 9] => [3, 5, 6] + [10, 9, 9]
		
		if (left <= right) {
			swap(nums, left, right);	
			left++;
			right--;
		}
		else {
			break;
		}
	}

	partition(nums, start, right);
	partition(nums, left, end);
}

void swap(vector<int> &nums, int i, int j) {
	int tmp = nums[i];
	nums[i] = nums[j];
	nums[j] = tmp;
}


//==================================================================
// Calculate Middle Point
//==================================================================
------------------------------------------------------
[Obtain mid with average]
*	*	*	*
5	6	7	8

mid = (5 + 8)/2 = 6
mid = (start + end)/2

------------------------------------------------------
[Obtain mid with length]

amount of points 
= (end - start) //number of points since the second
+ 1				//plus the first

*	*	*	*
5	6	7	8

mid = (5 - 1) + (8 - 5 + 1)/2 = 6

*	*	*	*	*
5	6	7	8	9

mid = (5 - 1) + (9 - 5 + 1)/2 + 1 = 7

amount = end - start + 1;
mid = (amount%2 == 0) ? 				//decide if amount is odd or even
		(start - 1) + amount/2 			//if even
		: (start - 1) + amount/2 + 1;	//if odd
