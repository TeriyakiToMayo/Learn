https://www.caveofprogramming.com/java/java-file-reading-and-writing-files-in-java.html

//==================================================================
// Read Ordinary String from File
//==================================================================
import java.io.*;

String fileName = "temp.txt";

// This will reference one line at a time
String line = null;

try {
	// FileReader reads text files in the default encoding.
	FileReader fileReader = 
		new FileReader(fileName);
	/*
	//If encoding conversion is needed
	InputStreamReader fileReader = 
		new InputStreamReader(new FileInputStream(fileName), "utf-8");
	 */

	// Always wrap FileReader in BufferedReader.
	BufferedReader bufferedReader = 
		new BufferedReader(fileReader);

	while((line = bufferedReader.readLine()) != null) {
		System.out.println(line);
	}   

	// Always close files.
	bufferedReader.close();         
}
catch(FileNotFoundException ex) {
	System.out.println(
		"Unable to open file '" + 
		fileName + "'");                
}
catch(IOException ex) {
	System.out.println(
		"Error reading file '" 
		+ fileName + "'");                  
	// Or we could just do this: 
	// ex.printStackTrace();
}


//==================================================================
// Read Byte from File
//==================================================================
https://www.tutorialspoint.com/java/io/fileinputstream_read_byte.htm
public static void main(String[] args) throws IOException {
      FileInputStream fis = null;
      int i = 0;
      char c;
      byte[] bs = new byte[4];
      
      try {
         // create new file input stream
         fis = new FileInputStream("C://test.txt");
         
         // read bytes to the buffer
         i = fis.read(bs);
         
         // prints
         System.out.println("Number of bytes read: "+i);
         System.out.print("Bytes read: ");
         
         // for each byte in buffer
         for(byte b:bs) {
         
            // converts byte to character
            c = (char)b;
            
            // print
            System.out.print(c);
         }  
         
      } catch(Exception ex) {
         // if any error occurs
         ex.printStackTrace();
      } finally {
         // releases all system resources from the streams
         if(fis!=null)
            fis.close();
      }
   }
   

//==================================================================
// Write Ordinary String to File
//==================================================================
 // The name of the file to open.
	String fileName = "temp.txt";

	try {
		// Assume default encoding.
		FileWriter fileWriter =
			new FileWriter(fileName);

		// Always wrap FileWriter in BufferedWriter.
		BufferedWriter bufferedWriter =
			new BufferedWriter(fileWriter);

		// Note that write() does not automatically
		// append a newline character.
		bufferedWriter.write("Hello there,");
		bufferedWriter.write(" here is some text.");
		bufferedWriter.newLine();
		bufferedWriter.write("We are writing");
		bufferedWriter.write(" the text to the file.");

		// Always close files.
		bufferedWriter.close();
	}
	catch(IOException ex) {
		System.out.println(
			"Error writing to file '"
			+ fileName + "'");
		// Or we could just do this:
		// ex.printStackTrace();
	}


//==================================================================
// Write Byte to File
//==================================================================
// The name of the file to create.
	String fileName = "temp.txt";

	try {
		// Put some bytes in a buffer so we can
		// write them. Usually this would be
		// image data or something. Or it might
		// be unicode text.
		String bytes = "Hello theren";
		byte[] buffer = bytes.getBytes();

		FileOutputStream outputStream =
			new FileOutputStream(fileName);

		// write() writes as many bytes from the buffer
		// as the length of the buffer. You can also
		// use
		// write(buffer, offset, length)
		// if you want to write a specific number of
		// bytes, or only part of the buffer.
		outputStream.write(buffer);

		// Always close files.
		outputStream.close();       

		System.out.println("Wrote " + buffer.length + 
			" bytes");
	}
	catch(IOException ex) {
		System.out.println(
			"Error writing file '"
			+ fileName + "'");
		// Or we could just do this:
		// ex.printStackTrace();
	}



//==================================================================
// How to check if file exists
//==================================================================
------------------------------------------------------
[Normal Way]
https://stackoverflow.com/questions/1816673/how-do-i-check-if-a-file-exists-in-java

File file = new File(path);
file.exists();

------------------------------------------------------
[NIO]
https://howtodoinjava.com/java/io/how-to-check-if-file-exists-in-java/
final Path path = Files.createTempFile("testFile", ".txt");
Files.exists(path);     //true



