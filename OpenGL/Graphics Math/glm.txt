#include <glm/glm.hpp>

//==================================================================
// GLM Matrices
//==================================================================
------------------------------------------------------
[Translation]
#include <glm/gtx/transform.hpp>
glm::mat4 myMatrix = glm::translate(glm::mat4(), glm::vec3(10, 0, 0));
/*
|1 0 0 10|
|0 1 0  0|
|0 0 1  0|
|0 0 0  1|
*/

------------------------------------------------------
[Identity]
glm::mat4 myMatrix = glm::mat4(1);
/*
|1 0 0 0|
|0 1 0 0|
|0 0 1 0|
|0 0 0 1|
*/

------------------------------------------------------
[Scaling]
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/transform.hpp>
glm::mat4 myMatrix = glm::scale(glm::mat4(), glm::vec3(2, 3, 4));
/*
|2 0 0 0|
|0 3 0 0|
|0 0 4 0|
|0 0 0 1|
*/

------------------------------------------------------
[Rotation]


//==================================================================
// Cumulating transformations
//==================================================================
World_Transform = Translation_world * Rotation_world * Scale_world * Local_Transform
Local_Transform = Translation_local * Rotation_local * Scale_local * Vertices

------------------------------------------------------
[Original]
glm::mat4 Projection = glm::perspective(glm::radians(45.0f), 4.0f / 3.0f, 0.1f, 100.0f);
glm::mat4 View = glm::lookAt(
	glm::vec3(4, 3, 3),
	glm::vec3(0, 0, 0),
	glm::vec3(0, 1, 0)
);
glm::mat4 Model = glm::mat4(1.0f);
glm::mat4 mvp = Projection * View * Model;

GLuint MatrixID = glGetUniformLocation(programID, "MVP");
glUniformMatrix4fv(MatrixID, 1, GL_FALSE, &mvp[0][0]);

------------------------------------------------------
[Fragment Shader]
gl_Position = MVP * vec4(position.x, position.y, 0.0, 1.0);


//==================================================================
// Print GLM
//==================================================================
https://stackoverflow.com/questions/11515469/how-do-i-print-vector-values-of-type-glmvec3-that-have-been-passed-by-referenc
#include "glm/ext.hpp" or "glm/gtx/string_cast.hpp"

std::cout<<glm::to_string(test)<<std::endl;
