====================================================================
TCP/IP Basic Concepts 
====================================================================
	TCP = "Transmission Control Protocol"
	IP = "Internet Protocol"
	
	TCP Socket: Virtual Ports (https://www.inetdaemon.com/tutorials/internet/tcp/tcp_sockets.shtml)
	Host: Nodes of the network
	


====================================================================
Model Architecture
====================================================================
	
	(https://gradeup.co/application-layer-protocols-dns-smtp-pop-ftp-http-i-ba1194bd-c5ab-11e5-9dcb-5849de73f8e1)
	(https://www.geeksforgeeks.org/protocols-application-layer/)
	(https://www.omnisecu.com/tcpip/tcpip-model.php)
	
	Network Access Layer	[Road]				[Network Nodes and Lines]	
		- Ethernet
		
	Internet Layer			[Road Addresses]	[Network Node Addresses]
		- Internet Protocol (IP)
		
	Transport Layer			[Van]				[Network Transportation Methods]
		- Transmission Control Protocol (TCP)
		- User Datagram Protocol (UDP)
		
	Application Layer		[Cargo]				[Data] 
	(Between client and server):
		- HyperText Transfer Protocol (HTTP): port 80
		
		- File Transfer Protocol (FTP): port 20 (data) 21 (control)
		
		- Telnet: port 23
		- Secure Shell (SSH): port 42
		
		- Domain Name Service (DNS): port 53
		- Dynamic Host Configuration Protocol (DHCP): port 67 (server) 68 (client)
		




====================================================================
IP Address
====================================================================
	(https://www.cnblogs.com/z-x-y/p/10506108.html)
	(https://whatismyipaddress.com/private-ip)
	(https://whatismyipaddress.com/nat)

	Network Address		192.168.100.0
	Available Addresses	192.168.100.1 ~ 192.168.100.254
	Broadcast Address	192.168.100.255
	
	-------------------------------------------------------------
	[Public and Private IP Addresses]
		
		Private IP Addresses (Non-routable Addresses)
		(Reserved by Internet Assigned Numbers Authority who distributes IP addresses):
			
			192.168.0.0 - 192.168.255.255 (65,536 IP addresses)
			172.16.0.0 - 172.31.255.255 (1,048,576 IP addresses)
			10.0.0.0 - 10.255.255.255 (16,777,216 IP addresses)


			
		Public IP Address:
		
			All other addresses
		
		
	-------------------------------------------------------------
	[Network Address Translation]
	
		NAT: process that changes private IP into public one
		Devices: router/firewalls
		
		Process of setting up a connection between internal device and internet resource:
			1. Record the private IP address
			
			2. Use the public IP to request resources from the public network
				
			3. Receive data from internet, send it back to the corresponding device 
			   (tablet, cell phone, PC), discard the connection
			   
		Other uses:
			1. Restricting incoming requests
				- Setting ports that can be accessed
			2. Restricting access to outside
				- Allowing access to specific websites
				

====================================================================
Subnet Mask
====================================================================
	(https://www.iplocation.net/subnet-mask)
	(https://www.cnblogs.com/z-x-y/p/10506108.html)
	(https://www.networkcomputing.com/network-security/ip-addresses-subnet-masks-and-default-gateways/page/0/1)
	(https://www.networkcomputing.com/network-security/ip-addresses-subnet-masks-and-default-gateways/page/0/2)
	

	Subnet Mask			255.255.255.0

	Available Address	192.168.100.5		1100 0000   1010 1000   0110 0100   0000 0101
	AND
	Subnet Mask			255.255.255.0		1111 1111   1111 1111   1111 1111   0000 0000
	----------------------------------------------------------------------------------------
	Result
	Network Address		192.168.100.0		1100 0000   1010 1000   0110 0100   0000 0000


	-------------------------------------------------------------
	[Subnet]

		IP_1 = 192.168.40.15
		IP_2 = 192.168.40.39

		Network Address of IP_1: 192.168.40.0
		Network Address of IP_2: 192.168.40.0

		Hence they are in the same subnet

	
	-------------------------------------------------------------
	[Subnet Mask Types]

		255.0  .0  .0  	A
		255.255.0  .0  	B
		255.255.255.0  	C

		All others		Classless Inter Domain Route (CIDR)

		- Using CIDRs because using only A B C types will be wastful


	-------------------------------------------------------------
	[Subnet Dividing]
	
		216.3.128.xxx:
			{sub1 /25}
			216.3.128.(0000 0000)
				{sub1-1 ???}
			216.3.128.(1000 0000)
				{sub1-2 /28}
					216.3.128.(1000 0000)
					...
					216.3.128.(1111 0000)


	-------------------------------------------------------------
	[Subnet Broadcast]

		
		Broadcast is only available within a subnet
			- All nodes in the subnet see the packages transmitted between nodes

		A subnet with too many devices will cause a boradcast traffic, hence anything fewer than
		1024 will be good



====================================================================
Gateways
====================================================================
	(https://blog.csdn.net/qiuzhongweiwei/article/details/80172529)
	(https://internetofthingsagenda.techtarget.com/definition/gateway)
	(https://blog.csdn.net/sgz_06_666666/article/details/51669863)
	(https://blog.csdn.net/jiangyu1013/article/details/79415369?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task)
	
	Gateway
		- Definition: A gateway device (router(device), server, proxy)
			- [Gateway Address]: IP address of the gateway device
				- 192.168.1.1 OR 192.168.0.1
			- Difference with router(concept)
				- Gateway: joins dissimilar networks (different subnets with different protocols)
				- Router: joins similar networks
		- Functionality: Gateway helps with data transmission between [subnet]s
		
	E.g.:
	
		SubnetA: 192.168.1.1~192.168.1.254 (255.255.255.0)
		SubnetB: 192.168.2.1~192.168.2.254 (255.255.255.0)
		
		Gateway delivers data package from SubnetA to SubnetB
	
	
====================================================================
DNS
====================================================================

	Domain Name Server: Converts domain name into IP addresses
	
	E.g.:
		8.8.8.8			Google free DNS Server
		8.8.4.4			Google free DNS Server2
		
		114.114.114.114	China Telecom free DNS
		202.100.96.68	China Telecom Ningxia DNS Server
	
	
====================================================================
DHCP Server
====================================================================
	
	Dynamic HOst Configuration Protocol (DHCP)
	
	Automatically assign IP addresses
	
	
====================================================================
Three-Way Handshake via TCP/IP
====================================================================
	(https://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml)
	(https://www.inetdaemon.com/tutorials/internet/tcp/tcp_header.shtml)
	(http://blog.itpub.net/31561266/viewspace-2564681/)
	(https://blog.csdn.net/dreamispossible/article/details/91345391)
	(https://blog.csdn.net/a19881029/article/details/38091243)

	
	-------------------------------------------------------------
	[Steps]
		SEE "Three-Way Handshake.png"
	
		Steps											Data Package	Host A		Host B
		
		Before connection								N.A.			CLOSED		LISTEN
		
		Host A sends a TCP SYNchronize packet to Host B	(SYN)			SYN_SENT	
		Received																	SYN_RCVD
		
		Host B sends a SYNchronize-ACKnowledgement		(SYN-ACK)			
		Received														ESTABLISHED	
		
		Host A sends ACKnowledge						(ACK)						
		Received																	ESTABLISHED
		
		TCP socket connection is ESTABLISHED.
		
		
		Transport data
		
		End connection
		
		Host A sends ACK of last package received		(ACK)			
		Received
		
		Host A sends FINish-ACKnowledgement to Host B	(FIN-ACK)		FIN_WAIT_1	
		Received																	CLOSE_WAIT
		
		Host B sends ACK of finishing connection		(ACK)				
		Received														FIN_WAIT_2
		
		Host B sends FINish-ACKnowledgement to Host A	(FIN-ACK)					LAST_ACK
		Received														
		
		Host A sends ACK								(ACK)			TIME_WAIT
		Received																	CLOSED
		
		CLIENT WAITS FOR A WHILE ENOUGH FOR A PACKAGE GOING BACK AND FORTH
		(https://blog.csdn.net/scuzoutao/article/details/81774100)
		
																		CLOSED
		
	
		Note: 
			1. SYN, FIN and ACK are 1 bit flags in TCP header
			   (https://blog.csdn.net/a19881029/article/details/38091243)
			2. If server not receive ACK from client, then it re-sents the package
				- Limited times, if exceeds, connection will be dropped
				- Each re-send has different time interval
			3. Connection is a piece of information stored in client and server
				- IP address
				- port
				...
	
	-------------------------------------------------------------
	[Sequence Number & Acknowlegement NUmber]
		
		bits: 32
		Range: (0 - 4294967295)
		
		Randomly set when TCP session starts, e.g.:
			0xf61c6cbe (dec: 4129057982)
		
		Example See "SeqNumAndAckNum.txt"
	
	-------------------------------------------------------------
	[Purposes]
		Let both client and server know the sending and each other's 
		receiving capabilities good.
		
		Step 1: A to B
		
			Client Acknowlegement
				- Client
					- Send: Unknown
					- Receive: Unknown
				- Server
					- Send: Unknown
					- Receive: Unknown
			Server Acknowlegement
				- Client
					- Send: Okay
					- Receive: Unknown
				- Server
					- Send: Unknown
					- Receive: Okay
					
		Step 2: B to A
		
			Client Acknowlegement
				- Client
					- Send: Okay (from Step 1 Server Acknowlegement)
					- Receive: Okay
				- Server
					- Send: Okay
					- Receive: Okay (from Step 1 Server Acknowlegement)
			Server Acknowlegement
				- Client
					- Send: Okay
					- Receive: Unknown
				- Server
					- Send: Unknown
					- Receive: Okay
					
		Step 2: A back to B
		
			Client Acknowlegement
				- Client
					- Send: Okay (from Step 1 Server Acknowlegement)
					- Receive: Okay
				- Server
					- Send: Okay
					- Receive: Okay (from Step 1 Server Acknowlegement)
			Server Acknowlegement
				- Client
					- Send: Okay
					- Receive: Okay (from Step 2 Client Acknowlegement)
				- Server
					- Send: Okay (from Step 2 Client Acknowlegement)
					- Receive: Okay
	
	

	
	-------------------------------------------------------------
	[Other questions]
		
		1. Can we carry data in Three-Way Handshake process?
			- 1st: no, if yes, attackers can send large amount of SYNs with Data, server is vulnerable
			- 2nd: no, server not confirm capabilities of client
			- 3rd: yes, connection has been established for client
			
		2. Connection Queues
			Half-open connection queue
				- Stores connections that not yet fully established
			Open connection queue
				- Stores established connections 
				- If full, package may lose
		
		
	-------------------------------------------------------------
	[Difference with UDP]
		
		TCP: reliable portocol, since establishes connections
		UDP: unreliable portocol, connectionless
		
	
	
